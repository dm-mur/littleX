name: Build and Deploy littleX

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-littleX: # TODO: need to change the tags below
    if: startsWith(github.ref, 'refs/tags/littleX-') 
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-architecture builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.0
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::776241927220:role/GitHubActionsSharedECRRole
          role-session-name: GitHubActions
          audience: sts.amazonaws.com

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Debug OIDC Token
        run: |
          echo "OIDC_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN"
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com"
      
      # Login to AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Extract tag name from GitHub ref
      - name: Get tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - use timestamp
            TAG="manual-$(date +%Y%m%d-%H%M%S)"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            # Release event - clean tag name
            TAG_NAME=${GITHUB_REF#refs/tags/}
            
            # Remove prefix: littleX-v1.2.3 -> v1.2.3
            if [[ $TAG_NAME =~ ^littleX-(.+)$ ]]; then
              TAG="${BASH_REMATCH[1]}"
            else
              # Use tag as-is if no prefix
              TAG="$TAG_NAME"
            fi
          else
            # Fallback
            TAG="latest"
          fi
          
          echo "Tag: $TAG"
          echo "Event: ${{ github.event_name }}"
          echo "Original Tag Name: ${TAG_NAME:-N/A}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: 776241927220.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: littlex/jac
          IMAGE_TAG: ${{ steps.tag.outputs.tag }}
        run: |
          echo "Building and pushing to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          # Build and push multi-architecture image
          docker buildx build \
            --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .
        working-directory: littleX_BE

  deploy-littleX-webapp: # TODO: need to change the tags below
    if: startsWith(github.ref, 'refs/tags/littleX-')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-architecture builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.0
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::776241927220:role/GitHubActionsSharedECRRole
          role-session-name: GitHubActions
          audience: sts.amazonaws.com

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Debug OIDC Token
        run: |
          echo "OIDC_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN"
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com"
      
      # Login to AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Extract tag name from GitHub ref
      - name: Get tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - use timestamp
            TAG="manual-$(date +%Y%m%d-%H%M%S)"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            # Release event - clean tag name
            TAG_NAME=${GITHUB_REF#refs/tags/}
            
            # Remove prefix: littleX-v1.2.3 -> v1.2.3
            if [[ $TAG_NAME =~ ^littleX-(.+)$ ]]; then
              TAG="${BASH_REMATCH[1]}"
            else
              # Use tag as-is if no prefix
              TAG="$TAG_NAME"
            fi
          else
            # Fallback
            TAG="latest"
          fi
          
          echo "Tag: $TAG"
          echo "Event: ${{ github.event_name }}"
          echo "Original Tag Name: ${TAG_NAME:-N/A}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Build and push webapp Docker image
      - name: Build and push webapp Docker image
        env:
          ECR_REGISTRY: 776241927220.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: littlex/webapp 
          IMAGE_TAG: ${{ steps.tag.outputs.tag }}
        run: |
          echo "Building and pushing webapp to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          # Build and push AMD64-only image for Next.js frontend
          docker buildx build \
            --platform linux/amd64 \
            --build-arg NEXT_PUBLIC_API_URL=https://x-api.jaseci.org \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .
        working-directory: littleX_FE

  summary:
    needs: [deploy-littleX, deploy-littleX-webapp]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build and Push Summary
        run: |
          echo "## littleX Build and Push Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Backend (JAC Server)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ needs.deploy-littleX.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository**: 776241927220.dkr.ecr.us-east-2.amazonaws.com/littlex/jac" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-littleX.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoint**: https://x-api.jaseci.org" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend (Webapp)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ needs.deploy-littleX-webapp.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository**: 776241927220.dkr.ecr.us-east-2.amazonaws.com/littlex/webapp" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-littleX-webapp.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: https://x.jaseci.org" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Deployment will be handled automatically by Flux in the infrastructure repository." >> $GITHUB_STEP_SUMMARY